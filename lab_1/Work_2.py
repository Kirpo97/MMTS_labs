matr_smeg_1 = [
#     1   2   3   4   5   6   7   8   9  10   j/i      
    ['0','0','0','1','1','0','0','0','0','0'],  # 1
    ['1','0','1','0','0','0','0','0','0','0'],  # 2
    ['1','0','0','0','0','0','0','0','0','0'],  # 3
    ['0','0','1','0','0','0','1','0','0','0'],  # 4
    ['0','0','0','0','0','1','0','0','0','0'],  # 5
    ['0','0','0','0','0','0','1','0','0','0'],  # 6
    ['0','0','0','0','0','0','0','0','1','0'],  # 7
    ['0','0','0','0','0','1','0','0','0','0'],  # 8
    ['0','0','0','0','0','0','0','1','0','1'],  # 9
    ['0','0','0','0','0','0','0','0','0','0']  # 10
]

matr_ints_1 = [
#     1    2    3    4    5    6    7    8    9   10   11   12   13   j/i             
    ['1','-1','-1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0'],  # 1
    ['0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0'],  # 2
    ['0', '0', '1', '0','-1','-1', '0', '0', '0', '0', '0', '0', '0'],  # 3
    ['0', '0', '0','-1', '0', '1', '1', '0', '0', '0', '0', '0', '0'],  # 4
    ['-1','0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0'],  # 5
    ['0', '0', '0', '0', '0', '0', '0','-1', '1','-1', '0', '0', '0'],  # 6
    ['0', '0', '0', '0', '0', '0','-1', '0','-1', '0', '1', '0', '0'],  # 7
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0','-1', '0'],  # 8
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0','-1', '1', '1'],  # 9
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0','-1']   # 10
]
       

matr_smeg_2 = [
#     1   2   3   4   5   6   7   8   9  10  11  12  13  14  15   j/i                  
    ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],  # 1
    ['1','0','1','0','1','0','0','0','0','0','0','0','0','0','0'],  # 2
    ['0','1','0','1','0','0','0','0','0','0','0','0','0','0','0'],  # 3
    ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],  # 4
    ['0','1','0','0','0','0','0','0','0','0','0','0','0','0','0'],  # 5
    ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],  # 6
    ['0','0','1','1','0','1','0','0','0','0','0','0','0','0','0'],  # 7
    ['0','0','0','1','0','0','1','0','0','0','0','1','0','0','0'],  # 8
    ['0','0','0','0','0','1','0','0','0','0','0','0','1','0','0'],  # 9
    ['0','0','0','0','0','1','1','0','1','0','1','0','0','0','0'],  # 10
    ['0','0','0','0','0','0','1','0','0','0','0','0','0','1','0'],  # 11
    ['0','0','0','0','0','0','0','0','0','0','1','0','0','0','0'],  # 12
    ['0','0','0','0','0','0','0','0','1','0','0','0','0','0','0'],  # 13
    ['0','0','0','0','0','0','0','0','1','1','0','1','0','0','1'],  # 14
    ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0']   # 15
]

matr_ints_2 = [
#     1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26  j/i                  
    ['-1','0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],  # 1
    ['1', '1','-1', '0', '1','-1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],  # 2
    ['0','-1', '1', '1', '0', '0','-1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],  # 3
    ['0', '0', '0','-1', '0', '0', '0','-1','-1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],  # 4
    ['0', '0', '0', '0','-1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],  # 5
    ['0', '0', '0', '0', '0', '0', '0', '0', '0','-1', '0','-1','-1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],  # 6
    ['0', '0', '0', '0', '0', '0', '1', '1', '0', '1','-1', '0', '0','-1','-1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],  # 7
    ['0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],  # 8
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0','-1', '0', '0','-1', '1','-1', '0', '0', '0', '0'],  # 9
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0','-1', '0', '0', '0'],  # 10
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0','-1','-1', '0', '0', '0', '0', '1', '0', '0'],  # 11
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0','-1', '0', '0', '1', '0', '0', '0', '0', '0','-1', '0'],  # 12
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1','-1', '0', '0', '0', '0', '0'],  # 13
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1','-1', '1', '1'],  # 14
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0','-1']   # 15
]

#  Множественное представление G(i)
M_smeg = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]

#  Множественное представление G^-1(i)
M_ints_m1 = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]
M_ints_1 = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]

for i in range(len(matr_ints_2)):
    for j in range(10):
        if matr_smeg_2[i][j] == '1':
            M_smeg[i].add(j+1)

for i in range(10):
    for j in range(13):
        if matr_ints_2[i][j] == '-1':
            M_ints_m1[i].add(j+1)
        elif matr_ints_2[i][j] == '1':
            M_ints_1[i].add(j+1)
            
    
# Находим пересечения подмножеств
mnog_1 = [set(), set(), set(), set(), set(), set(), set(), set(), set(), set()]
for k in range(10):  
    for p in range(10):
        if (M_ints_m1[k].intersection(M_ints_1[p])):
            mnog_1[k].add(p+1) 

R_lambda_1 = M_smeg
R_lambda_2 = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]
R_lambda_3 = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]
R_lambda_4 = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]
R_lambda_5 = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]

R_lambda = [
    R_lambda_1,
    R_lambda_2,
    R_lambda_3,
    R_lambda_4,
    R_lambda_5
]

def calc_lambda():
    for R in range(5):    
        for u in range(0,10):     
            for l in range(0,10):       
                if l in M_smeg[u]:
                    R_lambda[R][u].update(R_lambda[R-1][l-1])
        print("R_lambda(",R+1,") = ", R_lambda[R])
    
calc_lambda()

# Находим R
a = [{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}]
R = [set(), set(), set(), set(), set(), set(), set(), set(), set(), set()]

def calc_R():
    for t in range(10):            
        R[t] = a[t] | R_lambda[0][t] | R_lambda[1][t] | R_lambda[2][t] | R_lambda[3][t] | R_lambda[4][t]
        print("R(",t+1,") = ", R[t])
     
calc_R()

#  Находим Q(i)
Q_lambda_1 = mnog_1
Q_lambda_2 = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]
Q_lambda_3 = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]
Q_lambda_4 = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]
Q_lambda_5 = [set(),set(),set(),set(),set(),set(),set(),set(),set(),set()]

Q_lambda = [
    Q_lambda_1,
    Q_lambda_2,
    Q_lambda_3,
    Q_lambda_4,
    Q_lambda_5
]

def calc_lambda():
    for R in range(5):    
        for u in range(0,10):     
            for l in range(0,10):       
                if l in mnog_1[u]:
                    Q_lambda[R][u].update(Q_lambda[R-1][l-1])
        print("Q_lambda(",R+1,") = ", Q_lambda[R])
    
calc_lambda()
print()

# Находим R
a = [{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}]
Q = [set(), set(), set(), set(), set(), set(), set(), set(), set(), set()]

def calc_R():
    for t in range(10):            
        Q[t] = a[t] | Q_lambda[0][t] | Q_lambda[1][t] | Q_lambda[2][t] | Q_lambda[3][t] | Q_lambda[4][t]
        print("Q(",t+1,") = ", Q[t])
     
calc_R()

# Нахождение сильно связного подграфа:

V = [set(), set(), set(), set(), set(), set(), set(), set(), set(), set()]

for i in range(10):
    V[i] = R[i] & Q[i]
    print("V",i+1," = ", V[i])
    
# отфильтруем результаты:
o = 1
for i in range(1, 10):
    if (V[i-1].isdisjoint(V[i])):
        print("V",o," = ", V[i])
        o += 1

